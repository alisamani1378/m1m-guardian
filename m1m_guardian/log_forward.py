import logging, time, asyncio
from .notify import TelegramNotifier
import re

KEY_LOGGERS = {"guardian.nodes", "guardian.watcher", "guardian.start"}
KEYWORDS = (
    "ssh basic check failed",
    "no_xray_process",
    "no_container",
    "docker not installed",
    "spawn ssh failed",
    "log stream wrapper ended",
    "attach container",
    "follow pid=",
    "attached and streaming logs",
    "ensured firewall",
    "banned old ip=",
    "fd_unreadable",
    "switching to docker logs fallback"
)
# ÿÆÿ∑Ÿàÿ∑ info ÿ∫€åÿ± ÿ®ÿ≠ÿ±ÿßŸÜ€å ⁄©Ÿá ŸÜŸÖ€å ÿÆŸàÿßŸá€åŸÖ ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ€åŸÖ (⁄©ÿßŸáÿ¥ ŸÜŸà€åÿ≤)
SKIP_KEYWORDS = {"ensured firewall", "attached and streaming logs", "follow pid="}

_node_re = re.compile(r"node=([A-Za-z0-9_-]+)")

class TelegramLogHandler(logging.Handler):
    def __init__(self, notifier:TelegramNotifier, min_interval:float=15.0):
        super().__init__()
        self.notifier=notifier
        self.min_interval=min_interval
        self._last:dict[str,float]={}
        self._loop = None

    def _extract_node(self, msg:str):
        m=_node_re.search(msg)
        return m.group(1) if m else "?"

    def _format(self, record:logging.LogRecord)->str|None:
        raw=record.getMessage()
        low=raw.lower()
        node=self._extract_node(raw)
        # Skip purely informational lines
        if any(k in low for k in SKIP_KEYWORDS) and record.levelno < logging.WARNING:
            return None
        # Patterns
        if "ssh basic check failed" in low:
            # example: ssh basic check failed node=fl rc=255 lines=...;
            rc=re.search(r"rc=(\d+)", raw)
            lines=raw.split('lines=',1)[1] if 'lines=' in raw else ''
            return f"‚ùå ŸÜŸàÿØ {node}: ÿÆÿ∑ÿß€å SSH (rc={rc.group(1) if rc else '?'}).\nÿ¨ÿ≤ÿ¶€åÿßÿ™: {lines}\nŸÑÿ∑ŸÅÿßŸã ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ⁄©ŸÑ€åÿØ/Ÿæÿ≥Ÿàÿ±ÿØ Ÿà ÿØÿ≥ÿ™ÿ±ÿ≥€å ŸæŸàÿ±ÿ™ ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ."
        if "spawn ssh failed" in low:
            return f"‚ùå ŸÜŸàÿØ {node}: ÿ®ÿ±ŸÇÿ±ÿßÿ±€å ÿ¨ŸÑÿ≥Ÿá SSH ŸÜÿßŸÖŸàŸÅŸÇ. ÿ¥ÿ®⁄©Ÿá €åÿß ÿßÿ≠ÿ±ÿßÿ≤ ŸáŸà€åÿ™ ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ.\nÿÆÿßŸÖ: {raw}"
        if "no_container" in low:
            return f"‚ùå ŸÜŸàÿØ {node}: ⁄©ÿßŸÜÿ™€åŸÜÿ± ÿ™ÿπÿ±€åŸÅ‚Äåÿ¥ÿØŸá Ÿæ€åÿØÿß ŸÜÿ¥ÿØ. ŸÜÿßŸÖ ⁄©ÿßŸÜÿ™€åŸÜÿ± €åÿß ÿßÿ¨ÿ±ÿß€å docker ÿ±ÿß ÿ®ÿ±ÿ±ÿ≥€å ⁄©ŸÜ€åÿØ."
        if "docker not installed" in low or "no_docker" in low:
            return f"‚ö†Ô∏è ŸÜŸàÿØ {node}: docker ŸÜÿµÿ® €åÿß ÿØÿ± PATH ŸÜ€åÿ≥ÿ™."
        if "no_xray_process" in low:
            return f"‚ö†Ô∏è ŸÜŸàÿØ {node}: ŸÅÿ±ÿ¢€åŸÜÿØ xray €åÿßŸÅÿ™ ŸÜÿ¥ÿØ. ÿßÿ≠ÿ™ŸÖÿßŸÑÿßŸã ÿ≥ÿ±Ÿà€åÿ≥ ÿØÿßÿÆŸÑ ⁄©ÿßŸÜÿ™€åŸÜÿ± ŸÖÿ™ŸàŸÇŸÅ ÿßÿ≥ÿ™ €åÿß ŸáŸÜŸàÿ≤ ÿ®ÿßŸÑÿß ŸÜ€åÿßŸÖÿØŸá."
        if "fd_unreadable" in low:
            return f"‚ö†Ô∏è ŸÜŸàÿØ {node}: ÿÆÿ±Ÿàÿ¨€å ÿßÿ≥ÿ™ÿßŸÜÿØÿßÿ±ÿØ xray ŸÇÿßÿ®ŸÑ ÿÆŸàÿßŸÜÿØŸÜ ŸÜ€åÿ≥ÿ™ (fd_unreadable). ÿßÿ≠ÿ™ŸÖÿßŸÑ ÿ±€åÿØÿß€åÿ±⁄©ÿ™ ÿ®Ÿá ŸÅÿß€åŸÑ €åÿß ŸÖÿ≠ÿØŸàÿØ€åÿ™ ÿØÿ≥ÿ™ÿ±ÿ≥€å."
        if "switching to docker logs fallback" in low:
            return f"‚ÑπÔ∏è ŸÜŸàÿØ {node}: ÿ™ŸÑÿßÿ¥ ÿ®ÿ±ÿß€å fallback ÿ®Ÿá docker logs (ÿ™ÿ¥ÿÆ€åÿµ€å)."
        if "log stream wrapper ended" in low:
            rc=re.search(r"rc=(\d+)", raw)
            return f"‚ö†Ô∏è ŸÜŸàÿØ {node}: ÿßÿ≥ÿ™ÿ±€åŸÖ ŸÑÿß⁄Ø ŸÇÿ∑ÿπ ÿ¥ÿØ (rc={rc.group(1) if rc else '?'}). ÿ™ŸÑÿßÿ¥ ÿ®ÿ±ÿß€å ÿßÿ™ÿµÿßŸÑ ŸÖÿ¨ÿØÿØ..."
        if "attach container" in low:
            return f"üîå ŸÜŸàÿØ {node}: ÿßÿ™ÿµÿßŸÑ ÿ®Ÿá ⁄©ÿßŸÜÿ™€åŸÜÿ± ÿ®ÿ±ŸÇÿ±ÿßÿ± ÿ¥ÿØ."  # edit button can be offered manually via /start
        if "attached and streaming logs" in low:
            return f"‚úÖ ŸÜŸàÿØ {node}: ÿßÿ≥ÿ™ÿ±€åŸÖ ŸÑÿß⁄Ø ŸÅÿπÿßŸÑ ÿ¥ÿØ."
        if "banned old ip=" in low:
            # raw pattern: banned old ip=IP (user=... inbound=limit) on node=NAME for 10m
            m_ip=re.search(r"ip=([0-9A-Fa-f:.]+)", raw)
            m_user=re.search(r"user=([^\s)]+)", raw)
            m_inb=re.search(r"inbound=([^\s)]+)", raw)
            m_dur=re.search(r" for ([0-9]+m)", raw)
            ip=m_ip.group(1) if m_ip else '?'
            usr=m_user.group(1) if m_user else '?'
            # strip leading numeric id + dot if present
            if '.' in usr:
                first,rest=usr.split('.',1)
                if first.isdigit():
                    usr=rest
            inb=m_inb.group(1) if m_inb else '?'
            dur=m_dur.group(1) if m_dur else ''
            return f"üö´ IP {ip} ÿ®ŸÜ ÿ¥ÿØ ÿ±Ÿà€å ŸÜŸàÿØ {node} {('ÿ®ÿ±ÿß€å '+dur) if dur else ''}\n⁄©ÿßÿ±ÿ®ÿ±: {usr}\nÿß€ånbÿßŸÜÿØ: {inb}"
        if "banned ip=" in low:
            # summary multi-node ban already has its own custom notifier; skip to prevent duplicate
            return None
        # default for warnings/errors
        if record.levelno >= logging.WARNING:
            return f"‚ö†Ô∏è ŸÜŸàÿØ {node}: {raw}"
        # ignore residual infos
        return None

    def emit(self, record:logging.LogRecord):
        if record.name not in KEY_LOGGERS:
            return
        raw_msg=record.getMessage()
        low=raw_msg.lower()
        node=self._extract_node(raw_msg)
        if record.levelno < logging.WARNING and not any(kw in low for kw in KEYWORDS):
            return
        formatted=self._format(record)
        if not formatted:
            return
        now=time.time()
        key=formatted  # use formatted text for rate limiting
        lt=self._last.get(key,0)
        if now-lt < self.min_interval:
            return
        self._last[key]=now
        try:
            loop=asyncio.get_running_loop()
            # ÿß⁄Øÿ± Ÿæ€åÿßŸÖ ÿÆÿ∑ÿß/Ÿáÿ¥ÿØÿßÿ± ÿßÿ≥ÿ™ ÿØ⁄©ŸÖŸá Ÿà€åÿ±ÿß€åÿ¥ ŸÜŸàÿØ ÿ®ŸÅÿ±ÿ≥ÿ™
            if (formatted.startswith('‚ùå') or formatted.startswith('‚ö†Ô∏è')) and node and node!='?':
                loop.create_task(self.notifier.send_with_inline(formatted, [[('‚úèÔ∏è Ÿà€åÿ±ÿß€åÿ¥ ŸÜŸàÿØ', f'node:{node}')]]))
            else:
                loop.create_task(self.notifier.send(formatted))
        except RuntimeError:
            pass

def install_telegram_log_forward(notifier:TelegramNotifier, min_interval:float=15.0):
    if not notifier or not notifier.enabled:
        return None
    h=TelegramLogHandler(notifier, min_interval=min_interval)
    logging.getLogger().addHandler(h)
    return h
